services:
  app:
    build: .
    container_name: app
    restart: always
    env_file: .env
    depends_on:
      - db
      - redis
    ports:
      - "8000:8000"
    volumes:
      - .:/app  # Mount local source code for live updates
      - /app/__pycache__/  # Ignore Python cache
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

  db:
    image: postgres:15
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}  # Main DB created automatically
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh  # Initialize extra DB

  redis:
    image: redis:6.2
    container_name: redis_cache
    restart: always
    ports:
      - "6379:6379"

  celery_worker:
    build: .
    container_name: celery_worker
    restart: always
    env_file: .env
    depends_on:
      - app
      - redis
    volumes:
      - .:/app    # Mount local code for live updates
    working_dir: /app
    command: ["celery", "-A", "app.celery_app", "worker", "--loglevel=info", "-P", "gevent"]

  celery_beat:
    build: .
    container_name: celery_beat
    restart: always
    env_file: .env
    depends_on:
      - celery_worker
      - redis
    volumes:
      - .:/app  # Mount local code for live updates
    command: ["celery", "-A", "app.celery_app", "beat", "--loglevel=info"]

  healthcheck:
    image: curlimages/curl:latest
    container_name: healthcheck
    depends_on:
      - app
      - db
      - redis
    entrypoint: ["/bin/sh", "-c"]
    command:
      - |
        while ! curl -sSf http://app:8000/api/health; do
          echo "Waiting for API..."
          sleep 5
        done
        echo "API is up!"

volumes:
  postgres_data:
